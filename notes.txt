###################################################
# 1 - Create the App Registration + Service Principal
# Run in Azure Cloud Shell (Bash).
###################################################

#!/usr/bin/env bash
set -euo pipefail

# === inputs (edit these two only) ===
SUBSCRIPTION_ID="fff37d4f-d044-4d79-b5aa-b119708ab6ee"
APP_NAME="github-oidc-andylelli-mysql_202509"
# ====================================

echo "==> Using subscription"
az account set --subscription "$SUBSCRIPTION_ID"
echo "Subscription: $(az account show --query name -o tsv)"

echo "==> Create (or get) App Registration"
APP_ID=$(az ad app list --display-name "$APP_NAME" --query "[0].appId" -o tsv || true)
if [[ -z "${APP_ID}" ]]; then
  APP_ID=$(az ad app create \
    --display-name "$APP_NAME" \
    --sign-in-audience "AzureADMyOrg" \
    --query appId -o tsv)
  echo "Created App Registration."
else
  echo "App Registration already exists."
fi

echo "==> Create (or get) Service Principal for the app"
SP_OBJECT_ID=$(az ad sp show --id "$APP_ID" --query id -o tsv 2>/dev/null || true)
if [[ -z "${SP_OBJECT_ID}" ]]; then
  SP_OBJECT_ID=$(az ad sp create --id "$APP_ID" --query id -o tsv)
  echo "Created Service Principal."
else
  echo "Service Principal already exists."
fi

TENANT_ID=$(az account show --query tenantId -o tsv)

echo
echo "=== OUTPUTS (save these for GitHub Secrets) ==="
echo "AZURE_CLIENT_ID (App ID)     : $APP_ID"
echo "AZURE_TENANT_ID (Tenant ID)  : $TENANT_ID"
echo "Service Principal Object ID  : $SP_OBJECT_ID"
echo "==============================================="


###################################################
# 2 - Give the SP access to your resource group (RBAC)
# Run in Azure Cloud Shell (Bash).
###################################################

# --- inputs ---
SUBSCRIPTION_ID="fff37d4f-d044-4d79-b5aa-b119708ab6ee"
RG="laravel-rg"
SP_OBJECT_ID="0af4d286-4e1b-42fe-8b3c-6e4e57aace83"   # from your output
# --------------

az account set --subscription "$SUBSCRIPTION_ID"

# Easiest: full control of the RG (covers MySQL + Container Apps)
az role assignment create \
  --assignee-object-id "$SP_OBJECT_ID" \
  --assignee-principal-type ServicePrincipal \
  --role "Contributor" \
  --scope "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RG"

# (Optional: least-privilege instead of full Contributor)
# az role assignment create --assignee-object-id "$SP_OBJECT_ID" --assignee-principal-type ServicePrincipal \
#   --role "MySQL Flexible Server Contributor" --scope "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RG"
# az role assignment create --assignee-object-id "$SP_OBJECT_ID" --assignee-principal-type ServicePrincipal \
#   --role "Container Apps Contributor" --scope "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RG"

# Quick check:
az role assignment list \
  --assignee-object-id "$SP_OBJECT_ID" \
  --scope "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RG" \
  -o table


###################################################
# 3 - Add the GitHub federated credential (OIDC) for your repo/branch
# Run in Azure Cloud Shell (Bash).
###################################################

# --- inputs ---
APP_ID="fd69f461-cc6a-4ef9-8294-47451008d8db"   # AZURE_CLIENT_ID from your output
OWNER="andylelli"                           # e.g., andylelli
REPO="azure_mysql_202509"                                # e.g., festival-infra
BRANCH="main"                                   # or whatever branch runs your workflow
# --------------

APP_OBJECT_ID=$(az ad app show --id "$APP_ID" --query id -o tsv)

cat > fc.json <<'JSON'
{
  "name": "github-actions-branch",
  "issuer": "https://token.actions.githubusercontent.com",
  "subject": "repo:OWNER/REPO:ref:refs/heads/BRANCH",
  "description": "GitHub Actions OIDC (branch)",
  "audiences": [ "api://AzureADTokenExchange" ]
}
JSON

# inject your owner/repo/branch into the JSON
sed -i "s/OWNER/$OWNER/g; s/REPO/$REPO/g; s/BRANCH/$BRANCH/g" fc.json

# create the federated credential on the app registration
az ad app federated-credential create --id "$APP_OBJECT_ID" --parameters @fc.json


###################################################
# 3b - (Optional) Allow more triggers
# Run in Azure Cloud Shell (Bash).
###################################################

# For tags (e.g., v1.2.3):
cat > fc-tags.json <<'JSON'
{
  "name": "github-actions-tags",
  "issuer": "https://token.actions.githubusercontent.com",
  "subject": "repo:OWNER/REPO:ref:refs/tags/*",
  "description": "GitHub Actions OIDC (tags)",
  "audiences": [ "api://AzureADTokenExchange" ]
}
JSON
sed -i "s/OWNER/$OWNER/g; s/REPO/$REPO/g" fc-tags.json
az ad app federated-credential create --id "$APP_OBJECT_ID" --parameters @fc-tags.json

# For pull requests:
cat > fc-pr.json <<'JSON'
{
  "name": "github-actions-pr",
  "issuer": "https://token.actions.githubusercontent.com",
  "subject": "repo:OWNER/REPO:pull_request",
  "description": "GitHub Actions OIDC (PRs)",
  "audiences": [ "api://AzureADTokenExchange" ]
}
JSON
sed -i "s/OWNER/$OWNER/g; s/REPO/$REPO/g" fc-pr.json
az ad app federated-credential create --id "$APP_OBJECT_ID" --parameters @fc-pr.json


###################################################
# 4 - MySQL 
# Values only (remove Xs)
###################################################

XMYSQL_XADMIN_XPASSWORD = DerTbcVqWedY
XMYSQL_XAPP_XPASSWORD = MeFshjYgfgDF


###################################################
# 5 - MYSQL SSL Cert 
# Run in Azure Cloud Shell (Bash).
###################################################

az containerapp exec -g laravel-rg -n laravel-aca --command "/bin/sh -lc 'ls -l /etc/ssl/certs/DigiCertGlobalRootCA.crt.pem || echo not-found'"
az containerapp exec -g laravel-rg -n laravel-aca --command "/bin/sh -lc 'php -r \"\$h=getenv(\"DB_HOST\");\$d=getenv(\"DB_DATABASE\");\$u=getenv(\"DB_USERNAME\");\$p=getenv(\"DB_PASSWORD\");\$ca=getenv(\"DB_SSL_CA\")?:\"/etc/ssl/certs/DigiCertGlobalRootCA.crt.pem\";\$pdo=new PDO(\"mysql:host=\$h;port=3306;dbname=\$d;charset=utf8mb4\",\$u,\$p,[PDO::MYSQL_ATTR_SSL_CA=>\$ca]);var_export(\$pdo->query(\"SELECT @@ssl_version,@@ssl_cipher\")->fetch(PDO::FETCH_ASSOC));echo PHP_EOL;\"'"


###################################################
# 6 - Register the resource provider for MySQL Flexible Server.MYSQL SSL Cert 
# Run in Azure Cloud Shell (Bash).
###################################################

az account set --subscription "fff37d4f-d044-4d79-b5aa-b119708ab6ee"
az provider register --namespace Microsoft.DBforMySQL
# Wait until registered:
while [ "$(az provider show -n Microsoft.DBforMySQL --query registrationState -o tsv)" != "Registered" ]; do
  echo "Waiting for Microsoft.DBforMySQL registration..."; sleep 5
done


###################################################
# 7 - Manually registered the Microsoft.DBforMySQL resource provider at the subscription level so workflows with RG-scoped permissions can manage MySQL resources 
# Run in Azure Cloud Shell (Bash).
###################################################

az account set --subscription fff37d4f-d044-4d79-b5aa-b119708ab6ee
az provider register --namespace Microsoft.DBforMySQL


###################################################
# 8 - Cloudways credentions
# For the record ecord only
###################################################

CW_SSH_HOST = 161.35.36.63
CW_SSH_USER = master_kcpxvusscb
CW_SSH_KEY = Key from Cloudways
CW_SSH_ = f7V6TQzDFwva

f7V6TQzDFwva


###################################################
# 9 - Create a Firewall rule to access Azure MySQL via MySQL Workbench
# For the record ecord only
###################################################

az mysql flexible-server firewall-rule create \
  --name fest-db \
  --resource-group laravel-rg \
  --rule-name home-ip-8614122026 \
  --start-ip-address 86.141.220.26 \
  --end-ip-address 86.141.220.26
