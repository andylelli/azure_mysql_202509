name: MySQL Admin

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Action to perform"
        required: true
        default: "smoke"
        type: choice
        options:
          - smoke
          - provision
          - scale-up
          - scale-down
          - stop
          - start
          - delete
          - migrate
      run_migrations:
        description: "Run php artisan migrate --force after 'provision'"
        required: false
        default: "false"
        type: choice
        options: ["true","false"]
      maintenance_mode:
        description: "Put Laravel in maintenance mode during 'migrate'"
        required: false
        default: "true"
        type: choice
        options: ["true","false"]

concurrency:
  group: mysql-admin-${{ github.ref }}
  cancel-in-progress: false

env:
  AZURE_RG: laravel-rg
  ACA_NAME: laravel-aca
  # Adjust if needed:
  MYSQL_INFRA_DIR: infra/mysql

permissions:
  id-token: write   # for azure/login OIDC
  contents: read

jobs:
  smoke:
    if: ${{ github.event.inputs.action == 'smoke' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Check MySQL RP registration (read-only)
        run: |
          set -euo pipefail
          STATE=$(az provider show -n Microsoft.DBforMySQL --query registrationState -o tsv || echo "Unknown")
          echo "Microsoft.DBforMySQL registrationState: $STATE"
          if [ "$STATE" != "Registered" ]; then
            echo "❌ Microsoft.DBforMySQL is not Registered at the subscription. Please register it once (Portal or CLI) and rerun."
            exit 1
          fi

      - name: Verify resource group and Container Apps env
        run: |
          set -euo pipefail
          az group show -n "$AZURE_RG" -o table
          az containerapp env list -g "$AZURE_RG" -o table || true

      - name: Show Container App and public URL
        run: |
          set -euo pipefail
          az containerapp show -g "$AZURE_RG" -n "$ACA_NAME" \
            --query "{name:name,ingress:configuration.ingress.fqdn,activeRev:properties.latestRevisionName}" -o yaml || true

      - name: List Container App outbound IPs
        run: |
          set -euo pipefail
          az containerapp show -g "$AZURE_RG" -n "$ACA_NAME" \
            --query "properties.outboundIpAddresses" -o tsv || true

  provision:
    if: ${{ github.event.inputs.action == 'provision' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Check MySQL RP registration (read-only)
        run: |
          set -euo pipefail
          STATE=$(az provider show -n Microsoft.DBforMySQL --query registrationState -o tsv || echo "Unknown")
          echo "Microsoft.DBforMySQL registrationState: $STATE"
          if [ "$STATE" != "Registered" ]; then
            echo "❌ Microsoft.DBforMySQL is not Registered at the subscription. Please register it once (Portal or CLI) and rerun."
            exit 1
          fi

      - name: Provision MySQL Flexible Server + DB + user + firewall + secrets
        env:
          # required by your script
          MYSQL_ADMIN_PASSWORD: ${{ secrets.MYSQL_ADMIN_PASSWORD }}
          MYSQL_APP_PASSWORD:   ${{ secrets.MYSQL_APP_PASSWORD }}
          # known values for your environment (adjust if your script uses different var names)
          MYSQL_SERVER_NAME: fest-db
          MYSQL_DB_NAME:     laravel
          MYSQL_APP_USER:    appuser
          AZURE_RG:          ${{ env.AZURE_RG }}
        run: |
          set -euo pipefail
          bash "$MYSQL_INFRA_DIR/provision-mysql.sh"

      # ✅ Optional: run Laravel migrations right after provisioning
      - name: Run migrations in Container App
        if: ${{ github.event.inputs.run_migrations == 'true' }}
        run: |
          set -euo pipefail
          # Ensure an active revision exists (no-op if already healthy)
          az containerapp revision list \
            --resource-group "$AZURE_RG" \
            --name "$ACA_NAME" \
            --query "[?properties.active==\`true\`].name" -o tsv
          # Run DB migrations and warm caches
          az containerapp exec \
            --resource-group "$AZURE_RG" \
            --name "$ACA_NAME" \
            --command "php artisan migrate --force && php artisan config:clear && php artisan cache:clear && php artisan route:cache && php artisan event:cache"

  scale-up:
    if: ${{ github.event.inputs.action == 'scale-up' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Scale MySQL up (GP 2 vCPU / 8 GB)
        run: |
          set -euo pipefail
          bash "$MYSQL_INFRA_DIR/scale-up.sh"

  scale-down:
    if: ${{ github.event.inputs.action == 'scale-down' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Scale MySQL down (Burstable smallest available)
        run: |
          set -euo pipefail
          bash "$MYSQL_INFRA_DIR/scale-down.sh"

  stop:
    if: ${{ github.event.inputs.action == 'stop' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Stop MySQL Flexible Server
        run: |
          set -euo pipefail
          bash "$MYSQL_INFRA_DIR/stop-start-mysql.sh" stop

  start:
    if: ${{ github.event.inputs.action == 'start' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Start MySQL Flexible Server
        run: |
          set -euo pipefail
          bash "$MYSQL_INFRA_DIR/stop-start-mysql.sh" start

  delete:
    if: ${{ github.event.inputs.action == 'delete' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Delete MySQL Flexible Server (idempotent)
        run: |
          set -euo pipefail
          bash "$MYSQL_INFRA_DIR/delete-mysql.sh"

  migrate:
    if: ${{ github.event.inputs.action == 'migrate' }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Install MySQL client + jq
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client jq

      - name: Allow runner IP on Azure MySQL (temporary)
        run: |
          set -euo pipefail
          RUNNER_IP=$(curl -s https://api.ipify.org)
          az mysql flexible-server firewall-rule create \
            -g "$AZURE_RG" \
            -n fest-db \
            --rule-name gha-runner \
            --start-ip-address "$RUNNER_IP" \
            --end-ip-address "$RUNNER_IP"

      - name: (Optional) put app in maintenance mode
        if: ${{ github.event.inputs.maintenance_mode == 'true' }}
        run: |
          az containerapp exec \
            --resource-group "$AZURE_RG" \
            --name "$ACA_NAME" \
            --command "php artisan down --render='errors::503' || true"

      - name: Dump from Cloudways (online, consistent)
        env:
          # Expect these repo secrets to exist:
          # CW_DB_HOST=161.35.36.63, CW_DB_PORT=3306, CW_DB_NAME=gthewnsykf, CW_DB_USER=gthewnsykf, CW_DB_PASSWORD=<secret>
          CW_DB_HOST: ${{ secrets.CW_DB_HOST }}
          CW_DB_PORT: ${{ secrets.CW_DB_PORT }}
          CW_DB_NAME: ${{ secrets.CW_DB_NAME }}
          CW_DB_USER: ${{ secrets.CW_DB_USER }}
          CW_DB_PASSWORD: ${{ secrets.CW_DB_PASSWORD }}
        run: |
          set -euo pipefail
          mysqldump \
            --host="${CW_DB_HOST}" --port="${CW_DB_PORT:-3306}" \
            --user="${CW_DB_USER}" --password="${CW_DB_PASSWORD}" \
            --databases "${CW_DB_NAME}" \
            --single-transaction --quick --lock-tables=0 \
            --routines --triggers --events \
            --hex-blob --default-character-set=utf8mb4 \
            --set-gtid-purged=OFF --column-statistics=0 --no-tablespaces \
            --skip-comments \
          | sed -E 's/DEFINER=`[^`]+`@`[^`]+`/DEFINER=CURRENT_USER/g' \
          | gzip -c > dump.sql.gz
          ls -lh dump.sql.gz

      - name: Import into Azure MySQL (TLS)
        env:
          AZ_MYSQL_HOST: fest-db.mysql.database.azure.com
          AZ_MYSQL_DB: laravel
          AZ_MYSQL_USER: appuser@fest-db
          AZ_MYSQL_PASSWORD: ${{ secrets.MYSQL_APP_PASSWORD }}
        run: |
          set -euo pipefail
          # Ensure target DB exists (no-op if already present)
          mysql --host="$AZ_MYSQL_HOST" --user="$AZ_MYSQL_USER" --password="$AZ_MYSQL_PASSWORD" --ssl-mode=REQUIRED -e "CREATE DATABASE IF NOT EXISTS \`${AZ_MYSQL_DB}\`;"
          zcat dump.sql.gz | mysql \
            --host="$AZ_MYSQL_HOST" \
            --user="$AZ_MYSQL_USER" \
            --password="$AZ_MYSQL_PASSWORD" \
            --ssl-mode=REQUIRED

      - name: Post-import sanity checks (row counts)
        env:
          AZ_MYSQL_HOST: fest-db.mysql.database.azure.com
          AZ_MYSQL_DB: laravel
          AZ_MYSQL_USER: appuser@fest-db
          AZ_MYSQL_PASSWORD: ${{ secrets.MYSQL_APP_PASSWORD }}
        run: |
          set -euo pipefail
          mysql --host="$AZ_MYSQL_HOST" --user="$AZ_MYSQL_USER" --password="$AZ_MYSQL_PASSWORD" --ssl-mode=REQUIRED -N -e "
          SELECT CONCAT('SELECT ''', table_name, ''' AS tbl, COUNT(*) AS cnt FROM \`', table_schema, '\`.\`', table_name, '\`;')
          FROM information_schema.tables
          WHERE table_schema='${AZ_MYSQL_DB}' AND table_type='BASE TABLE';
          " | mysql --host="$AZ_MYSQL_HOST" --user="$AZ_MYSQL_USER" --password="$AZ_MYSQL_PASSWORD" --ssl-mode=REQUIRED -N > counts.txt
          echo 'Counts on Azure:' && cat counts.txt

      - name: Run Laravel migrations + cache warmup
        run: |
          az containerapp exec \
            --resource-group "$AZURE_RG" \
            --name "$ACA_NAME" \
            --command "php artisan migrate --force && php artisan config:clear && php artisan cache:clear && php artisan route:cache"

      - name: Bring app back up
        if: ${{ github.event.inputs.maintenance_mode == 'true' }}
        run: |
          az containerapp exec \
            --resource-group "$AZURE_RG" \
            --name "$ACA_NAME" \
            --command "php artisan up || true"

      - name: Cleanup firewall rule
        if: always()
        run: |
          az mysql flexible-server firewall-rule delete \
            -g "$AZURE_RG" \
            -n fest-db \
            --rule-name gha-runner \
            --yes
