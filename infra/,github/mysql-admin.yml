name: MySQL Admin

on:
  workflow_dispatch:
    inputs:
      action:
        description: "smoke | provision | scale-up | scale-down | stop | start | delete"
        required: true
        type: choice
        options: [smoke, provision, scale-up, scale-down, stop, start, delete]
      admin_ip:
        description: "Optional: your public IP to allow direct admin access"
        required: false

jobs:
  run:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    concurrency:
      group: mysql-admin-${{ github.ref }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id:  ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Prepare Azure CLI
        run: |
          set -euxo pipefail
          az extension add -n containerapp --upgrade || true
          az extension add -n rdbms --upgrade || az extension add -n rdbms-flexible-server --upgrade || true

      - name: Set environment defaults
        run: |
          echo "RG=laravel-rg" >> $GITHUB_ENV
          echo "LOC=uksouth" >> $GITHUB_ENV
          echo "ENV_NAME=laravel-env" >> $GITHUB_ENV
          echo "APP_NAME=laravel-aca" >> $GITHUB_ENV
          echo "SERVER=fest-db" >> $GITHUB_ENV
          if [ -n "${{ github.event.inputs.admin_ip }}" ]; then
            echo "ADMIN_IP=${{ github.event.inputs.admin_ip }}" >> $GITHUB_ENV
          fi

      - name: Smoke test (OIDC & RBAC only)
        run: |
          set -euxo pipefail
          echo "== Account =="
          az account show
          echo "== Resource group access =="
          az group show -n "$RG" --query "{name:name,location:location}" -o table
          echo "== Container Apps Environment =="
          az containerapp env show -g "$RG" -n "$ENV_NAME" --query "{name:name,location:location}" -o table
          echo "== Outbound IPs (for firewall rules) =="
          ENV_ID=$(az containerapp env show -g "$RG" -n "$ENV_NAME" --query id -o tsv)
          az rest --method get --uri "https://management.azure.com${ENV_ID}?api-version=2025-01-01" \
            --query "properties.outboundIpAddresses"

      - name: Execute action
        env:
          MYSQL_ADMIN_PASSWORD: ${{ secrets.MYSQL_ADMIN_PASSWORD }}
          MYSQL_APP_PASSWORD:   ${{ secrets.MYSQL_APP_PASSWORD }}
        run: |
          set -euo pipefail
          case "${{ inputs.action }}" in
            provision)
              # Create in Burstable (matches default tier) to avoid mismatch
              SKU_NAME=Standard_B1ms bash infra/mysql/provision-mysql.sh
              ;;
            scale-up)
              # We'll also pass the tier on scale (see below)
              TIER=GeneralPurpose TARGET_SKU=Standard_D2ds_v5 bash infra/mysql/scale-mysql.sh
              ;;
            scale-down)
              TIER=Burstable TARGET_SKU=Standard_B1ms bash infra/mysql/scale-mysql.sh
              ;;
            stop)
              bash infra/mysql/stop-start-mysql.sh stop
              ;;
            start)
              bash infra/mysql/stop-start-mysql.sh start
              ;;
            delete)
              bash infra/mysql/delete-mysql.sh
              ;;
            *)
              echo "Unknown action: ${{ inputs.action }}" >&2
              exit 1
              ;;
          esac

